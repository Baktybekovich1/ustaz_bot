from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app.keyboards import cancel_kb, format_kb, main_kb
from app.utils import validate_phone
from app.db import AsyncSessionLocal
from app.crud import create_lead
from app.schemas import LeadCreate
from app.config import ADMIN_CHAT_IDS

router = Router()

class Signup(StatesGroup):
    waiting_name = State()
    waiting_phone = State()
    waiting_format = State()


@router.callback_query(F.data.startswith("signup:"))
async def signup_start(query: types.CallbackQuery, state: FSMContext):
    course = query.data.split(":", 1)[1]
    await state.update_data(course=course)
    await query.message.answer(
        f"–ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å: <b>{course}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=cancel_kb
    )
    await state.set_state(Signup.waiting_name)
    await query.answer()


# @router.message(Signup.waiting_name)
# async def signup_name(message: types.Message, state: FSMContext):
#     if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
#         await state.clear()
#         return await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.", reply_markup=main_kb)
#
#     await state.update_data(name=message.text.strip())
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω :", reply_markup=cancel_kb)
#     await state.set_state(Signup.waiting_phone)
#
#
# @router.message(Signup.waiting_phone)
# async def signup_phone(message: types.Message, state: FSMContext):
#     if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
#         await state.clear()
#         return await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.", reply_markup=main_kb)
#
#     phone = validate_phone(message.text)
#     if not phone:
#         return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#     await state.update_data(phone=phone)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=format_kb)
#     await state.set_state(Signup.waiting_format)
from aiogram.types import KeyboardButton

# –®–∞–≥ 1: –∂–¥—ë–º –∏–º—è
@router.message(Signup.waiting_name)
async def signup_name(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.", reply_markup=main_kb)

    await state.update_data(name=message.text.strip())

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
    kb = ReplyKeyboardBuilder()
    kb.row(
        KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True),
        KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    )

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:",
        reply_markup=kb.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(Signup.waiting_phone)


# –®–∞–≥ 2: –∂–¥—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω
@router.message(Signup.waiting_phone)
async def signup_phone(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.", reply_markup=main_kb)

    # –∂–¥—ë–º –∫–æ–Ω—Ç–∞–∫—Ç
    if not message.contact:
        return await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª.")

    phone = message.contact.phone_number  # —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    await state.update_data(phone=phone)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=format_kb)
    await state.set_state(Signup.waiting_format)


@router.message(Signup.waiting_format)
async def signup_format(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.", reply_markup=main_kb)

    fmt = message.text.strip()
    if fmt not in ["–û–Ω–ª–∞–π–Ω", "–û—Ñ–ª–∞–π–Ω"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

    data = await state.get_data()
    await state.clear()

    payload = LeadCreate(
        name=data["name"],
        phone=data["phone"],
        course=data["course"],
        format=fmt,
        source="signup"
    )
    async with AsyncSessionLocal() as db:
        await create_lead(db, payload)

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üìû",
        reply_markup=main_kb
    )

    for admin in ADMIN_CHAT_IDS:
        await message.bot.send_message(
            admin,
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {data['name']}\n–¢–µ–ª: {data['phone']}\n–ö—É—Ä—Å: {data['course']}\n–§–æ—Ä–º–∞—Ç: {fmt}"
        )
